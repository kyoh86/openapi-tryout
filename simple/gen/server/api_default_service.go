/*
 * openapi-tryout
 *
 * Try OpenAPI 3
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"net/http"
	"errors"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API. 
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// AccountGet - 
func (s *DefaultApiService) AccountGet(ctx context.Context, offset int32, limit int32, userName string) (ImplResponse, error) {
	// TODO - update AccountGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []User{}) or use other options such as http.Ok ...
	//return Response(200, []User{}), nil

	//TODO: Uncomment the next line to return response Response(0, {}) or use other options such as http.Ok ...
	//return Response(0, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("AccountGet method not implemented")
}

// EchoGet - 
func (s *DefaultApiService) EchoGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update EchoGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(0, string{}) or use other options such as http.Ok ...
	//return Response(0, string{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("EchoGet method not implemented")
}

